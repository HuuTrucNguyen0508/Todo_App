name: Simple CI/CD (npm-based)

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  API_IMAGE_NAME: cursor-todo-api
  WEB_IMAGE_NAME: cursor-todo-web

jobs:
  lint-and-format:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g pnpm@8
          pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Check Prettier formatting
        run: pnpm run format:check

      - name: Success summary
        run: |
          echo "✅ **Linting and formatting checks passed!**" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint: No critical issues found" >> $GITHUB_STEP_SUMMARY
          echo "- Prettier: Code is properly formatted" >> $GITHUB_STEP_SUMMARY

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g pnpm@8
          pnpm install --frozen-lockfile

      - name: Run tests (placeholder)
        run: pnpm run test
        env:
          NODE_ENV: test
          NODE_OPTIONS: --experimental-vm-modules

      - name: Test summary
        run: |
          echo "✅ **Test placeholder completed!**" >> $GITHUB_STEP_SUMMARY
          echo "Ready for real tests when implemented." >> $GITHUB_STEP_SUMMARY

  build-and-push:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract API metadata
        id: api-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss'}}

      - name: Extract Web metadata
        id: web-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.WEB_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.api-meta.outputs.tags }}
          labels: ${{ steps.api-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.web-meta.outputs.tags }}
          labels: ${{ steps.web-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment summary
        run: |
          echo "# 🚀 Todo App Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🐳 Published Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### API Image" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.API_IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.api-meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Web Image" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.WEB_IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.web-meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✨ Features Included" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Neon PostgreSQL integration** - Database operations fully traced" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Enhanced tracing** - Jaeger captures API + database operations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Observability stack** - Prometheus, Grafana, Loki, Jaeger" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Multi-architecture** - Works on Intel and ARM processors" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Production ready** - Optimized builds with security hardening" >> $GITHUB_STEP_SUMMARY
